/*
 * This file is generated by jOOQ.
 */
package net.dualsoft.blockbuster.db.jooq.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import net.dualsoft.blockbuster.db.jooq.DefaultSchema;
import net.dualsoft.blockbuster.db.jooq.Indexes;
import net.dualsoft.blockbuster.db.jooq.Keys;
import net.dualsoft.blockbuster.db.jooq.enums.RequestStatus;
import net.dualsoft.blockbuster.db.jooq.tables.records.RentalRequestRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RentalRequest extends TableImpl<RentalRequestRecord> {

    private static final long serialVersionUID = -1295097629;

    /**
     * The reference instance of <code>rental_request</code>
     */
    public static final RentalRequest RENTAL_REQUEST = new RentalRequest();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RentalRequestRecord> getRecordType() {
        return RentalRequestRecord.class;
    }

    /**
     * The column <code>rental_request.rental_request_id</code>.
     */
    public final TableField<RentalRequestRecord, Integer> RENTAL_REQUEST_ID = createField("rental_request_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('rental_request_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>rental_request.film_id</code>.
     */
    public final TableField<RentalRequestRecord, Integer> FILM_ID = createField("film_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>rental_request.store_id</code>.
     */
    public final TableField<RentalRequestRecord, Integer> STORE_ID = createField("store_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>rental_request.customer_id</code>.
     */
    public final TableField<RentalRequestRecord, Integer> CUSTOMER_ID = createField("customer_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>rental_request.status</code>.
     */
    public final TableField<RentalRequestRecord, RequestStatus> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR.defaultValue(org.jooq.impl.DSL.field("'pending'::request_status", org.jooq.impl.SQLDataType.VARCHAR)).asEnumDataType(net.dualsoft.blockbuster.db.jooq.enums.RequestStatus.class), this, "");

    /**
     * The column <code>rental_request.create_date</code>.
     */
    public final TableField<RentalRequestRecord, Timestamp> CREATE_DATE = createField("create_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>rental_request.last_update</code>.
     */
    public final TableField<RentalRequestRecord, Timestamp> LAST_UPDATE = createField("last_update", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>rental_request</code> table reference
     */
    public RentalRequest() {
        this(DSL.name("rental_request"), null);
    }

    /**
     * Create an aliased <code>rental_request</code> table reference
     */
    public RentalRequest(String alias) {
        this(DSL.name(alias), RENTAL_REQUEST);
    }

    /**
     * Create an aliased <code>rental_request</code> table reference
     */
    public RentalRequest(Name alias) {
        this(alias, RENTAL_REQUEST);
    }

    private RentalRequest(Name alias, Table<RentalRequestRecord> aliased) {
        this(alias, aliased, null);
    }

    private RentalRequest(Name alias, Table<RentalRequestRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> RentalRequest(Table<O> child, ForeignKey<O, RentalRequestRecord> key) {
        super(child, key, RENTAL_REQUEST);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.RENTAL_REQUEST_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RentalRequestRecord, Integer> getIdentity() {
        return Keys.IDENTITY_RENTAL_REQUEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RentalRequestRecord> getPrimaryKey() {
        return Keys.RENTAL_REQUEST_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RentalRequestRecord>> getKeys() {
        return Arrays.<UniqueKey<RentalRequestRecord>>asList(Keys.RENTAL_REQUEST_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<RentalRequestRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RentalRequestRecord, ?>>asList(Keys.RENTAL_REQUEST__RENTAL_REQUEST_FILM_ID_FKEY, Keys.RENTAL_REQUEST__RENTAL_REQUEST_STORE_ID_FKEY, Keys.RENTAL_REQUEST__RENTAL_REQUEST_CUSTOMER_ID_FKEY);
    }

    public Film film() {
        return new Film(this, Keys.RENTAL_REQUEST__RENTAL_REQUEST_FILM_ID_FKEY);
    }

    public Store store() {
        return new Store(this, Keys.RENTAL_REQUEST__RENTAL_REQUEST_STORE_ID_FKEY);
    }

    public Customer customer() {
        return new Customer(this, Keys.RENTAL_REQUEST__RENTAL_REQUEST_CUSTOMER_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RentalRequest as(String alias) {
        return new RentalRequest(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RentalRequest as(Name alias) {
        return new RentalRequest(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RentalRequest rename(String name) {
        return new RentalRequest(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RentalRequest rename(Name name) {
        return new RentalRequest(name, null);
    }
}
