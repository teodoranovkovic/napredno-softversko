/*
 * This file is generated by jOOQ.
 */
package net.dualsoft.blockbuster.db.jooq.tables;


import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import net.dualsoft.blockbuster.db.jooq.DefaultSchema;
import net.dualsoft.blockbuster.db.jooq.Indexes;
import net.dualsoft.blockbuster.db.jooq.Keys;
import net.dualsoft.blockbuster.db.jooq.tables.records.AddressRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Address extends TableImpl<AddressRecord> {

    private static final long serialVersionUID = 1005228973;

    /**
     * The reference instance of <code>address</code>
     */
    public static final Address ADDRESS = new Address();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AddressRecord> getRecordType() {
        return AddressRecord.class;
    }

    /**
     * The column <code>address.address_id</code>.
     */
    public final TableField<AddressRecord, Integer> ADDRESS_ID = createField("address_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('address_address_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>address.address</code>.
     */
    public final TableField<AddressRecord, String> ADDRESS_ = createField("address", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>address.district</code>.
     */
    public final TableField<AddressRecord, String> DISTRICT = createField("district", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>address.city_id</code>.
     */
    public final TableField<AddressRecord, Short> CITY_ID = createField("city_id", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>address.postal_code</code>.
     */
    public final TableField<AddressRecord, String> POSTAL_CODE = createField("postal_code", org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>address.last_update</code>.
     */
    public final TableField<AddressRecord, Timestamp> LAST_UPDATE = createField("last_update", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>address.longitude</code>.
     */
    public final TableField<AddressRecord, BigDecimal> LONGITUDE = createField("longitude", org.jooq.impl.SQLDataType.NUMERIC(20, 17), this, "");

    /**
     * The column <code>address.latitude</code>.
     */
    public final TableField<AddressRecord, BigDecimal> LATITUDE = createField("latitude", org.jooq.impl.SQLDataType.NUMERIC(20, 18), this, "");

    /**
     * Create a <code>address</code> table reference
     */
    public Address() {
        this(DSL.name("address"), null);
    }

    /**
     * Create an aliased <code>address</code> table reference
     */
    public Address(String alias) {
        this(DSL.name(alias), ADDRESS);
    }

    /**
     * Create an aliased <code>address</code> table reference
     */
    public Address(Name alias) {
        this(alias, ADDRESS);
    }

    private Address(Name alias, Table<AddressRecord> aliased) {
        this(alias, aliased, null);
    }

    private Address(Name alias, Table<AddressRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Address(Table<O> child, ForeignKey<O, AddressRecord> key) {
        super(child, key, ADDRESS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ADDRESS_PKEY, Indexes.IDX_FK_CITY_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AddressRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ADDRESS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AddressRecord> getPrimaryKey() {
        return Keys.ADDRESS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AddressRecord>> getKeys() {
        return Arrays.<UniqueKey<AddressRecord>>asList(Keys.ADDRESS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AddressRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AddressRecord, ?>>asList(Keys.ADDRESS__FK_ADDRESS_CITY);
    }

    public City city() {
        return new City(this, Keys.ADDRESS__FK_ADDRESS_CITY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Address as(String alias) {
        return new Address(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Address as(Name alias) {
        return new Address(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Address rename(String name) {
        return new Address(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Address rename(Name name) {
        return new Address(name, null);
    }
}
