/*
 * This file is generated by jOOQ.
 */
package net.dualsoft.blockbuster.db.jooq.tables.records;


import java.sql.Timestamp;

import javax.annotation.Generated;

import net.dualsoft.blockbuster.db.jooq.tables.FilmActor;
import net.dualsoft.blockbuster.db.jooq.tables.interfaces.IFilmActor;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FilmActorRecord extends UpdatableRecordImpl<FilmActorRecord> implements Record4<Short, Short, Timestamp, String>, IFilmActor {

    private static final long serialVersionUID = 2133049798;

    /**
     * Setter for <code>film_actor.actor_id</code>.
     */
    @Override
    public void setActorId(Short value) {
        set(0, value);
    }

    /**
     * Getter for <code>film_actor.actor_id</code>.
     */
    @Override
    public Short getActorId() {
        return (Short) get(0);
    }

    /**
     * Setter for <code>film_actor.film_id</code>.
     */
    @Override
    public void setFilmId(Short value) {
        set(1, value);
    }

    /**
     * Getter for <code>film_actor.film_id</code>.
     */
    @Override
    public Short getFilmId() {
        return (Short) get(1);
    }

    /**
     * Setter for <code>film_actor.last_update</code>.
     */
    @Override
    public void setLastUpdate(Timestamp value) {
        set(2, value);
    }

    /**
     * Getter for <code>film_actor.last_update</code>.
     */
    @Override
    public Timestamp getLastUpdate() {
        return (Timestamp) get(2);
    }

    /**
     * Setter for <code>film_actor.character</code>.
     */
    @Override
    public void setCharacter(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>film_actor.character</code>.
     */
    @Override
    public String getCharacter() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record2<Short, Short> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Short, Short, Timestamp, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Short, Short, Timestamp, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Short> field1() {
        return FilmActor.FILM_ACTOR.ACTOR_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Short> field2() {
        return FilmActor.FILM_ACTOR.FILM_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field3() {
        return FilmActor.FILM_ACTOR.LAST_UPDATE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return FilmActor.FILM_ACTOR.CHARACTER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short component1() {
        return getActorId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short component2() {
        return getFilmId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp component3() {
        return getLastUpdate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component4() {
        return getCharacter();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short value1() {
        return getActorId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short value2() {
        return getFilmId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value3() {
        return getLastUpdate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getCharacter();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FilmActorRecord value1(Short value) {
        setActorId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FilmActorRecord value2(Short value) {
        setFilmId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FilmActorRecord value3(Timestamp value) {
        setLastUpdate(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FilmActorRecord value4(String value) {
        setCharacter(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FilmActorRecord values(Short value1, Short value2, Timestamp value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public void from(IFilmActor from) {
        setActorId(from.getActorId());
        setFilmId(from.getFilmId());
        setLastUpdate(from.getLastUpdate());
        setCharacter(from.getCharacter());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public <E extends IFilmActor> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached FilmActorRecord
     */
    public FilmActorRecord() {
        super(FilmActor.FILM_ACTOR);
    }

    /**
     * Create a detached, initialised FilmActorRecord
     */
    public FilmActorRecord(Short actorId, Short filmId, Timestamp lastUpdate, String character) {
        super(FilmActor.FILM_ACTOR);

        set(0, actorId);
        set(1, filmId);
        set(2, lastUpdate);
        set(3, character);
    }
}
